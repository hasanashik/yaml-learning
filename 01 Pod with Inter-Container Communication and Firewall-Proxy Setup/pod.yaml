apiVersion: v1
kind: Pod
metadata:
  name: firewall-pod
  labels:
    app: multi-container-app
spec:
  containers:
  - name: container-1
    image: nginx:alpine
    command:
      - sh
      - -c
      - |
        echo '<p>Reply from container 1</p>' > /usr/share/nginx/html/index.html
        echo '<p>Custom Error Page for app1</p>' > /usr/share/nginx/html/50x.html
        echo 'server {
                listen 8081;
                location / {
                  root /usr/share/nginx/html;
                  error_page 500 502 503 504 /50x.html;
                  location = /50x.html {
                    root /usr/share/nginx/html;
                  }
                }
              }' > /etc/nginx/conf.d/default.conf
        nginx -g 'daemon off;'
    ports:
      - containerPort: 8081

  - name: container-2
    image: nginx:alpine
    command:
      - sh
      - -c
      - |
        echo '<p>Reply from container 2</p>' > /usr/share/nginx/html/index.html
        echo 'server { listen 8082; location / { root /usr/share/nginx/html; } }' > /etc/nginx/conf.d/default.conf
        nginx -g 'daemon off;'
    ports:
      - containerPort: 8082

  - name: firewall-container
    image: nginx
    ports:
    - containerPort: 8080
    volumeMounts:
    - name: nginx-config
      mountPath: /etc/nginx/nginx.conf
      subPath: nginx.conf
    command: ["nginx", "-g", "daemon off;", "-c", "/etc/nginx/nginx.conf"]


  volumes:
  - name: nginx-config
    configMap:
      name: nginx-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    user  nginx;
    worker_processes  auto;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {
        upstream app1 {
            server 127.0.0.1:8081;
        }

        upstream app2 {
            server 127.0.0.1:8082;
        }

        server {
            listen 8080;

            # Proxy requests to /app1
            location /app1 {
                rewrite ^/app1/(.*)$ /$1 break;
                proxy_pass http://app1/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Proxy requests to /app2
            location /app2 {
                rewrite ^/app2/(.*)$ /$1 break;
                proxy_pass http://app2/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }


            location / {
                # Default location
                default_type text/html;
                return 200 '<html><body><p>Default content served from firewall-container</p></body></html>';
            }

            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
                root /usr/share/nginx/html;
            }
        }
    }


---
apiVersion: v1
kind: Service
metadata:
  name: firewall-service
spec:
  selector:
    app: multi-container-app
  ports:
    - protocol: TCP
      port: 8090        # External access port
      targetPort: 8080 # Nginx proxy or firewall container port
      nodePort: 30007  # NodePort for external access
  type: NodePort
